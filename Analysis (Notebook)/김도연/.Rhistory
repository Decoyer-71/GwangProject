table(is.na(welfare$income))
sex_income <-welfare %>% filter(!is.na(income)) %>% group_by(sex) %>% summarise(mean_income=mean(income))
ggplot(data = sexincome, aes(x=sex, y=mean_income)) +geom_col()
ggplot(data = sex_income, aes(x=sex, y=mean_income)) +geom_col()
raw_welfare <- read.spss(file='../data/Koweps_hpc10_2015_beta1.sav', to.data.frame = T)
raw_welfare <- read.spss(file='../data/Koweps_hpc10_2015_beta1.sav', to.data.frame = T)
```{r}
## 1-3. Data Review
```{r}
welfare <- welfare[,c('sex','birth','marriage','religion','income','code_job','code_region')]
str(welfare)
welfare <- welfare[,c('sex','birth','marriage','religion','income','code_job','code_region')]
str(welfare)
## 2-1. 성별에 따른 월급 차이
### 2-1-1. Feature Review
```{r}
```{r}
# 월급 변수 검토
summary(welfare$income)
# 월급 변수 검토
summary(welfare$income)
```{r}
qplot(welfare$income) + xlim(0,1000)
### 2-1-2. Preprocessing
```{r}
table(welfare$sex)
qplot(welfare$sex)
```{r}
# 결측치와 이상치 확인
table(is.na(welfare$sex))
# 결측치와 이상치 확인
table(is.na(welfare$sex))
welfare$sex <- ifelse(welfare$sex==9, NA, welfare$sex)
table(is.na(welfare$sex))
# 결측치와 이상치 확인
table(is.na(welfare$sex))
welfare$sex <- ifelse(welfare$sex==9, NA, welfare$sex)
table(is.na(welfare$sex))
```{r}
# 월급 변수의 결축치, 이상치 확인
table(is.na(welfare$income))
table(is.na(welfare$income))
# 월급 변수의 결축치, 이상치 확인
table(is.na(welfare$income))
welfare$income <- ifelse(welfare$income %in% c(0,9999), NA, welfare$income)
table(is.na(welfare$income))
```{r}
ggplot(data = sex_income, aes(x=sex, y=mean_income)) +geom_col()
ggplot(data = sex_income, aes(x=sex, y=mean_income)) +geom_col()
raw_welfare <- read.spss(file='../data/Koweps_hpc10_2015_beta1.sav', to.data.frame = T)
str(raw_welfare)
welfare <- raw_welfare
dim(welfare)
welfare <- rename(welfare, sex=h10_g3, birth=h10_g4, marriage=h10_g10, religion=h10_g11,
income=p1002_8aq1, code_job=h10_eco9, code_region=h10_reg7)
welfare <- welfare[,c('sex','birth','marriage','religion','income','code_job','code_region')]
str(welfare)
# 성별 항복에 대한 이름 변경
welfare$sex <- ifelse(welfare$sex==1, 'male', 'female')
table(welfare$sex)
qplot(welfare$sex)
# 결측치와 이상치 확인
table(is.na(welfare$sex))
welfare$sex <- ifelse(welfare$sex==9, NA, welfare$sex)
table(is.na(welfare$sex))
# 월급 변수의 결축치, 이상치 확인
table(is.na(welfare$income))
welfare$income <- ifelse(welfare$income %in% c(0,9999), NA, welfare$income)
table(is.na(welfare$income))
sex_income <-welfare %>% filter(!is.na(income)) %>% group_by(sex) %>% summarise(mean_income=mean(income))
ggplot(data = sex_income, aes(x=sex, y=mean_income)) +geom_col()
class(welfare$birth)
qplot(welfare$birth)
# 이상치 결측 처리
welfare$birth <- ifelse(welfare$birth ==9999, NA, welfare$birth)
table(is.na(welfare$birth))
# 파생변수 나이 생성
welfare$age <- 2023-welfare$birth +1
summary(welfare$age)
qplot(welfare$age)
# 나이에 따른 월급 평균표
age_income <- welfare %>% filter(!is.na(income)) %>% group_by(age) %>% summarise(mean_income=mean(income))
head(age_income)
# 그래프 만들기
ggplot(data= age_income, aes(x=age, y=mean_income)) + geom_line()
#### 실습2 ####
library(car)
Vies(state.x77)
Views(state.x77)
View(state.x77)
states<- as.data.frame(state.x77[,c('Murder','Population','Illiteracry','Income','Frost')])
states<- as.data.frame(state.x77[,c('Murder','Population','Illiteracry','Income','Frost')])
states<- as.data.frame(state.x77[,c('Murder','Population','Illiteracy','Income','Frost')])
states
lm(Murder ~., data=states)
fit <-lm(Murder ~., data=states)
summary(fit)
vif(fit)
### 이상 관측치를 확인할 수 있는 그래프
# 이상치: 무조건 빼는 것 아님
influencePlot(fit, id=list(method= 'identify'))
### 회귀 모형의 교정
par(mfrow=c(2,2))
plot(fit)
## 정규성을 만족하지 않을 때
shapiro.test(resid(fit))
## 정규성을 만족하지 않을 때: 결과 변수에 람다승
shapiro.test(resid(fit))
powerTransform(states$Murder)
## 정규성을 만족하지 않을 때: 결과 변수에 람다승
shapiro.test(resid(fit))
summary(powerTransform(states$Murder))
## 선형성을 만족하지 않ㅇ르 때
boxTidwell(Murder ~ Population + Illiteracy, data= states)
states$Population <- states$Population ^ 0.85
states$Illiteracy <- states$Illiteracy ^ 1.35
fit2 <- lm(Murder ~ Population+Illiteracy, data=states)
summary(fit2)
## 등분산성을 만족하지 않을 경우
ncvTest(fit)
spreadLevelPlot(fit)
# AIC(Akaike's Information Criterion): 이 값은 작을 수록 좋다
fit1<- lm(Murder ~ ., data=states)
summary(fit1)
fit2 <- lm(Murder ~ Population+Illiteracy, data=states)
summary(fit2)
AIC(fit1, fit2)
## Backward
full.model <- lm(Murder ~.,data=states)
full.model
reduce.model<- step(full.model, direction='backward')
reduce.model
## Forward
min.model <-lm(Murder ~ 1, data= states)
step(min.model, direction = 'forward', scope=(Murder ~Population+Illiteracy+Income+ Frost))
## All Subset Regression
install.packages('leaps')
library(leaps)
regsubsets(Murder ~ Population+Illiteracy+Income+Frost, data=states, nbest=4)
leap <- regsubsets(Murder ~ Population+Illiteracy+Income+Frost, data=states, nbest=4)
leap
par(mfrow=c(2,2))
plot(fit)
plot(leap)
par(mfrow=c(1,))
plot(leap)
par(mfrow=c(1,1))
plot(leap)
plot(leap, scale='adjr2')
#### 실습3 ####
mydata <- read.csv('../data/resgression.csv')
#### 실습3 ####
mydata <- read.csv('../data/regression.csv')
View(mydata)
fit1<- lm(birth_rate ~ ., data=mydata)
summary(fit1)
fit1<- lm(birth_rate ~ dummy, data=mydata)
summary(fit1)
fit1<- lm(birth_rate ~ . -군별, data=mydata)
summary(fit1)
shapiro.test(resid(fit1))
powerTransform(mydata$birth_rate)
summary(powerTransform(mydata$birth_rate))
fit <-lm(Murder ~., data=states)
summary(fit) # 0.5285
### 이상 관측치를 확인할 수 있는 그래프
# 이상치: 무조건 빼는 것 아님
# 영향 관측치
influencePlot(fit, id=list(method= 'identify'))
## 정규성을 만족하지 않을 때: 결과 변수에 람다승
shapiro.test(resid(fit))
powerTransform(states$Murder)
powerTransform(states$Murder)
summary(powerTransform(states$Murder)) # 변환할 필요 없음
plot(fit)
par(mfrow=c(2,2))
plot(fit)
fit3<- lm(birth_rate ~ . -군별, data=mydata)
summary(fit3)
par(mfrow=c(2,2))
plot(fit3)
## 선형성을 만족하지 않을 때
boxTidwell(Murder ~ Population + Illiteracy, data= states)
## 정규성을 만족하지 않을 때: 결과 변수에 람다승
shapiro.test(resid(fit))
## 정규성을 만족하지 않을 때: 결과 변수에 람다승
shapiro.test(resid(fit3))
powerTransform(mydata$birth_rate)
summary(powerTransform(mydata$birth_rate) # 변환할 필요 없음
summary(powerTransform(mydata$birth_rate)) # 변환할 필요 없음
## 선형성을 만족하지 않을 때
boxTidwell(Murder ~ Population + Illiteracy, data= states)
summary(powerTransform(mydata$birth_rate)) # 변환할 필요 없음
## 선형성을 만족하지 않을 때
boxTidwell(birth_rate ~ . -군별, data=mydata)
powerTransform(states$Murder)
summary(powerTransform(states$Murder)) # 변환할 필요 없음
summary(powerTransform(mydata$birth_rate)) # 변환할 필요 없음
## 등분산성을 만족하지 않을 경우
ncvTest(fit3) # 등분산 O
spreadLevelPlot(fit3) # 독립변수에 1.2배
## 선형성을 만족하지 않을 때
boxTidwell(Murder ~ Population + Illiteracy, data= states)
## 등분산성을 만족하지 않을 경우
ncvTest(fit) # 등분산 X
## 등분산성을 만족하지 않을 경우
ncvTest(fit3) # 등분산 O
spreadLevelPlot(fit) # 독립변수에 1.2배
spreadLevelPlot(fit3) # 독립변수에 1.2배
## 선형성을 만족하지 않을 때
boxTidwell(birth_rate ~ ., data=mydata)
## 선형성을 만족하지 않을 때
boxTidwell(birth_rate ~ cultural_center, data=mydata)
fit3<- lm(birth_rate ~ . -군별, data=mydata)
summary(fit3)
## 선형성을 만족하지 않을 때
boxTidwell(birth_rate ~ social_welfare+active_firms+tris, data=mydata)
## 선형성을 만족하지 않을 때
boxTidwell(birth_rate ~ social_welfare+active_firms+tris, data=mydata)
mydata$social_welfare <- mydata$social_welfare ^ 1.68
mydata$active_firms <- mydata$active_firms ^ 2.96
mydata$tris <- mydata$tris ^ -0.38
fit4 <- lm(birth_rate ~ social_welfare+active_firms+tris, data=mydata)
summary(fit4)
## Backward
full.model <- lm(birth_rate ~.,data=mydata)
reduce.model<- step(full.model, direction='backward')
reduce.model
## Forward
min.model <-lm(birth_rate ~ 1, data= mydata)
step(min.model, direction = 'forward', scope=(birth_rate ~ social_welfare+active_firms+tris))
#### 실습3 ####
# 정규성, 등분산성, 다중공산성 검증
# 독립변수들이 출산율과 관계가 있는가 검증
# 가장 영향력이 있는 변수들은 무엇인가
mydata <- read.csv('../data/regression.csv')
mydata <- mydata[,-1]
View(mydata)
fit3<- lm(birth_rate ~ ., data=mydata)
summary(reg1)
reg1<- lm(birth_rate ~ ., data=mydata)
summary(reg1)
par(mfrow=c(2,2))
plot(reg1)
## Backward
full.model <- lm(birth_rate ~.,data=mydata)
reduce.model<- step(full.model, direction='backward')
reduce.model
#### 실습3 ####
# 정규성, 등분산성, 다중공산성 검증
# 독립변수들이 출산율과 관계가 있는가 검증
# 가장 영향력이 있는 변수들은 무엇인가
mydata <- read.csv('../data/regression.csv')
View(mydata)
mydata <- mydata[,-1]
View(mydata)
## Backward
full.model <- lm(birth_rate ~.,data=mydata)
reduce.model<- step(full.model, direction='backward')
mydata
reduce.model<- step(full.model, direction='backward', trace=0)
reduce.model
## Forward
min.model <-lm(birth_rate ~ 1, data= mydata)
step(min.model, direction = 'forward', scope=(birth_rate ~ social_welfare+active_firms+tris))
reg2 <- lm(birth_rate ~ social_welfare + active_firms + pop + tris + kindergarten, data = mydata)
summary(reg2)
# birth_rate ~ tris + active_firms, data = mydata
reg3 <- lm(birth_rate ~ tris + active_firms, data = mydata)
summary(reg3)
step(min.model, direction = 'forward', scope=(birth_rate ~ social_welfare+active_firms+tris))
plot(reg2)
# 정규성 검증
shapiro.test(resid(reg2))
powerTransform(mydata$birth_rate)
summary(powerTransform(mydata$birth_rate)) # 변환할 필요 없음
reg3 <- lm(birth_rate^-1 ~ social_welfare + active_firms + pop + tris + kindergarten, data = mydata)
summary(reg3)
summary(reg2)
shapiro.test(resid(reg3))
## 선형성을 만족하지 않을 때
boxTidwell(birth_rate^-1 ~ social_welfare + active_firms + pop + tris + kindergarten, data = mydata)
plot(reg3)
plot(reg2)
plot(reg3)
plot(reg2)
plot(reg3)
plot(reg2)
## 다중공산성 검증 (전체변수, 역전파, 정규성조정)
sqrt(vif(reg1))
sqrt(vif(reg2))
sqrt(vif(reg3))
## 등분산성을 만족하지 않을 경우
ncvTest(reg1) # 등분산 X
## 등분산성을 만족하지 않을 경우
ncvTest(reg2) # 등분산 X
## 등분산성을 만족하지 않을 경우
ncvTest(reg3) # 등분산 X
spreadLevelPlot(reg3) # 독립변수에 -3.3배
reg4 <- lm(birth_rate^3.36 ~ social_welfare + active_firms + pop + tris + kindergarten, data = mydata)
summary(reg4)
reg4 <- lm(birth_rate^-3.36 ~ social_welfare + active_firms + pop + tris + kindergarten, data = mydata)
summary(reg4) # 설명력 0.08
ncvTest(reg4)
reg5 <- lm(log(birth_rate^-1) ~ social_welfare + active_firms + pop + tris + kindergarten, data = mydata)
summary(reg5) # 설명력 0.08
ncvTest(reg5)
reg5 <- lm(log(birth_rate)^-1 ~ social_welfare + active_firms + pop + tris + kindergarten, data = mydata)
summary(reg5) # 설명력 0.11
reg5 <- lm(log(birth_rate^-1) ~ social_welfare + active_firms + pop + tris + kindergarten, data = mydata)
summary(reg5) # 설명력 0.11
#### 실습4 ####
mydata <- read.csv('../data/SeoulBikeData.csv')
View(mydata)
summary(mydata)
## 1. 시간대별로 평균 대여 대수
library(dplyr)
?dplyr
mydata %>% summarise(mean(Rented.Bike.Count))
mydata %>% group_by(Hour) %>%  summarise(mean(Rented.Bike.Count))
result1<- mydata %>% group_by(Hour) %>% summarise(count=mean(Rented.Bike.Count))
result1
## 시각화
library(ggplot2)
## 시각화
library(ggplot2)
ggplot(result1, aes(Hour, count)) + geom_line()
ggplot(result1, aes(Hour, count)) + geom_line()
## 시각화
library(ggplot2)
ggplot(result1, aes(Hour, count)) + geom_line()
ggplot(result1, aes(Hour, count)) + geom_line() + geom_vline(8)
ggplot(result1, aes(Hour, count)) + geom_line() + geom_vline(xintercept = 8)
ggplot(result1, aes(Hour, count)) + geom_line(color=blues9) + geom_vline(xintercept = 8)
ggplot(result1, aes(Hour, count)) + geom_line(color='blue', size=2) + geom_vline(xintercept = 8)
ggplot(result1, aes(Hour, count)) + geom_line(color='blue', size=2) + geom_vline(xintercept = 8, size=2, color='red')
ggplot(result1, aes(Hour, count)) + geom_line(color='blue', size=2) +
geom_vline(xintercept = 8, size=2, color='red')+
geom_vline(xintercept = 18, size=2, color='red')
ggplot(result1, aes(Hour, count)) + geom_line(color='blue', size=2) +
geom_vline(xintercept = 8, size=2, color='red')+
geom_vline(xintercept = 18, size=2, color='red')+
annotate(geom = 'text',x=6, y=1000, label='출근')
ggplot(result1, aes(Hour, count)) + geom_line(color='blue', size=2) +
geom_vline(xintercept = 8, size=2, color='red')+
geom_vline(xintercept = 18, size=2, color='red')+
annotate(geom = 'text',x=6, y=1000, label='출근', size=2)
ggplot(result1, aes(Hour, count)) + geom_line(color='blue', size=2) +
geom_vline(xintercept = 8, size=2, color='red')+
geom_vline(xintercept = 18, size=2, color='red')+
annotate(geom = 'text',x=6, y=1000, label='출근', size=20)
ggplot(result1, aes(Hour, count)) + geom_line(color='blue', size=2) +
geom_vline(xintercept = 8, size=2, color='red')+
geom_vline(xintercept = 18, size=2, color='red')+
annotate(geom = 'text',x=6, y=1000, label='출근', size=10)
ggplot(result1, aes(Hour, count)) + geom_line(color='blue', size=2) +
geom_vline(xintercept = 8, size=2, color='red')+
geom_vline(xintercept = 18, size=2, color='red')+
annotate(geom = 'text',x=6, y=11100, label='출근', size=10)
ggplot(result1, aes(Hour, count)) + geom_line(color='blue', size=2) +
geom_vline(xintercept = 8, size=2, color='red')+
geom_vline(xintercept = 18, size=2, color='red')+
annotate(geom = 'text',x=6, y=1100, label='출근', size=10)
ggplot(result1, aes(Hour, count)) + geom_line(color='blue', size=2) +
geom_vline(xintercept = 8, size=2, color='red')+
geom_vline(xintercept = 18, size=2, color='red')+
annotate(geom = 'text',x=6, y=1100, label='출근', size=10)+
annotate(geom = 'text',x=16, y=1400, label='퇴근', size=10)
## 3. 선형회귀
attach(mydata)
lm(Rented.Bike.Count ~. )
lm(Rented.Bike.Count ~. , data=my)
lm(Rented.Bike.Count ~. , data=mydata)
reg1 <- lm(Rented.Bike.Count ~. , data=mydata)
summary(reg1)
## 3. 선형회귀
View(mydata)
#### 로지스틱 회귀 분석 ####
# 로지스틱 회귀: 선형회귀에 로그를 취한 것. 선형을 비선형으로
# 일반화 선형 모델: glm()
titanic <- read.csv('../data/train.csv', header=T)
View(titanic)
detach(mydata)
titanic$Pclass1 <- ifelse(titanic$Pclass==1, 1, 0)
titanic$Pclass2 <- ifelse(titanic$Pclass==2, 1, 0)
titanic$Pclass3 <- ifelse(titanic$Pclass==3, 1, 0)
View(titanic)
reg2 <- glm(Survived ~ Pclass1+Pclass2+Pclass3, data=titanic)
summary(reg2)
reg2 <- glm(Survived ~ Pclass1+Pclass2+Pclass3, data=titanic)
summary(reg2)
reg1<- lm(Survived ~ Pclass1+Pclass2+Pclass3, data=titanic)
summary(reg1)
summary(reg2)
summary(reg1)
reg1<- lm(Survived ~ Pclass2+Pclass3, data=titanic)
summary(reg1)
reg1<- lm(Survived ~ Pclass2+Pclass1, data=titanic) # 상수항 intercept가 Pclass1
summary(reg1)
# Pclass1 생존확률 0.62963
# Pclass2 생존확률 0.62963 - 0.15680
# Pclass3 생존확률
0.62963 - 0.38727
reg2 <- glm(Survived ~ Pclass1+Pclass2+Pclass3, data=titanic, family=binomial)
reg2 <- glm(Survived ~ Pclass2+Pclass3, data=titanic, family=binomial)
summary(reg2)
?exp
exp(2.17) #자연지수 계ㅏㄴ
exp(1) #자연지수 계ㅏㄴ
exp(0.5306) #자연지수 계산
(exp(0.5306)-1)*100 #자연지수 계산
# Age, Fare, Gender, SibSp
attach(titanic)
titanic$GenderFemale <-ifelse(Sex='female',1,0)
titanic$GenderFemale <-ifelse(titanic$Sex='female',1,0)
titanic$GenderFemale <-ifelse(titanic$Sex=='female',1,0)
detach(titanic)
unique(SibSp)
# Age, Fare, Gender, SibSp
titanic$GenderFemale <-ifelse(titanic$Sex=='female',1,0)
titanic$GenderMale <-ifelse(titanic$Sex=='male',1,0)
titanic$SibSp0 <-ifelse(titanic$SibSp==0, 1, 0)
titanic$SibSp1 <-ifelse(titanic$SibSp==1, 1, 0)
titanic$SibSp2 <-ifelse(titanic$SibSp==2, 1, 0)
titanic$SibSp3 <-ifelse(titanic$SibSp==3, 1, 0)
titanic$SibSp4 <-ifelse(titanic$SibSp==4, 1, 0)
titanic$SibSp5 <-ifelse(titanic$SibSp==5, 1, 0)
titanic$SibSp8 <-ifelse(titanic$SibSp==8, 1, 0)
reg3 <- glm(Survived ~ Age+Fare+GenderMale+GenderFemale+SigSp1+SigSp2+SigSp3+SigSp4+SigSp5,
data=titanmic, family = binomial)
reg3 <- glm(Survived ~ Age+Fare+GenderMale+GenderFemale+SigSp1+SigSp2+SigSp3+SigSp4+SigSp5,
data=titamic, family = binomial)
reg3 <- glm(Survived ~ Age+Fare+GenderMale+GenderFemale+SigSp1+SigSp2+SigSp3+SigSp4+SigSp5,
data=titanic, family = binomial)
reg3 <- glm(Survived ~ Age+Fare+GenderMale+GenderFemale+SibSp1+SibSp2+SibSp3+SibSp4+SibSp5,
data=titanic, family = binomial)
summary(reg3)
reg3 <- glm(Survived ~ Age+Fare+GenderMale+SibSp0+SibSp1+SibSp2+SibSp3+SibSp4+SibSp5,
data=titanic, family = binomial)
summary(reg3)
reg3 <- glm(Survived ~ Age+Fare+GenderMale+SibSp8+SibSp1+SibSp2+SibSp3+SibSp4+SibSp5,
data=titanic, family = binomial)
summary(reg3)
reg3 <- glm(Survived ~ Age+Fare+GenderMale+SibSp1+SibSp2+SibSp3+SibSp4+SibSp5,
data=titanic, family = binomial)
summary(reg3)
exp(0.0224)
exp(-0.0224) # 나이가 1증가할수록
exp(0.0149) # 티켓값이 1 증가할수록 생존확률이
# 2. 주차장 이용률 시계열 분석
df <- read.csv('부설주차장 이용률.csv')
getwd()
setwd()
setwd(C:\Users\acorn\Documents\GwangProject\Analysis (Notebook)\김도연)
setwd(C:\\Users\\acorn\\Documents\\GwangProject\\Analysis (Notebook)\\김도연)
?setwd
setwd('C:\\Users\\acorn\\Documents\\GwangProject\\Analysis (Notebook)\\김도연')
getwd()
# 2. 주차장 이용률 시계열 분석
df <- read.csv('부설주차장 이용률.csv')
# 2. 주차장 이용률 시계열 분석
df <- read.csv('부설주차장 이용량.csv')
View(df)
library(dygraphs)
library(xts)
library(ggplot2)
건국대학교병원<-xts(df$건국대학교병원, order.by =timestamps)
뚝섬3주차장 <-xts(df$뚝섬3주차장, order.by =timestamps)
뚝섬4주차장<-xts(df$뚝섬4주차장, order.by =timestamps)
실로암사우나중곡점주차장 <-xts(df$실로암사우나중곡점주차장, order.by =timestamps)
연한빌딩<-xts(df$연한빌딩, order.by =timestamps)
와이엠프라젠스파 <-xts(df$와이엠프라젠스파, order.by =timestamps)
편안한요양병원<-xts(df$편안한요양병원, order.by =timestamps)
date <- cbind(건국대학교병원,뚝섬1주차장 ,뚝섬2주차장 ,뚝섬3주차장 ,뚝섬4주차장,실로암사우나중곡점주차장,연한빌딩,와이엠프라젠스파,편안한요양병원)
View(df)
# 시간 간격을 나타내는 POSIXct 객체를 생성합니다.
timestamps <- seq(as.POSIXct("2023-04-15 6:00:00"), as.POSIXct("2023-04-21 18:00:00"), by="hour")
timestamps
# 시간 간격을 나타내는 POSIXct 객체를 생성합니다.
timestamps <- seq(as.POSIXct("2023-04-15 8:00:00"), as.POSIXct("2023-04-21 18:00:00"), by="hour")
timestamps
# 시간 간격을 나타내는 POSIXct 객체를 생성합니다.
timestamps <- seq(as.POSIXct("2023-04-15 8:00:00"), as.POSIXct("2023-04-21 18:00:00"), by="hour")
건국대학교병원<-xts(df$건국대학교병원, order.by =timestamps)
뚝섬1주차장 <-xts(df$뚝섬1주차장, order.by =timestamps)
뚝섬2주차장 <-xts(df$뚝섬2주차장, order.by =timestamps)
뚝섬3주차장 <-xts(df$뚝섬3주차장, order.by =timestamps)
뚝섬4주차장<-xts(df$뚝섬4주차장, order.by =timestamps)
실로암사우나중곡점주차장 <-xts(df$실로암사우나중곡점주차장, order.by =timestamps)
연한빌딩<-xts(df$연한빌딩, order.by =timestamps)
와이엠프라젠스파 <-xts(df$와이엠프라젠스파, order.by =timestamps)
# 임의의 데이터를 생성합니다.
data <- rnorm(length(timestamps))
편안한요양병원<-xts(df$편안한요양병원, order.by =timestamps)
# xts 객체를 만듭니다.
my_xts <- xts(data, order.by = timestamps)
date <- cbind(건국대학교병원,뚝섬1주차장 ,뚝섬2주차장 ,뚝섬3주차장 ,뚝섬4주차장,실로암사우나중곡점주차장,연한빌딩,와이엠프라젠스파,편안한요양병원)
dygraph(date) %>% dyLegend(labelsSeparateLines = TRUE)
dyRangeSelector(date) %>% dyLegend(labelsSeparateLines = TRUE)
dygraph(date) %>% dyLegend(labelsSeparateLines = TRUE)
dygraph(date) %>% dyLegend(labelsSeparateLines = False)
dygraph(date) %>% dyLegend(labelsSeparateLines = None)
dygraph(date)
dygraph(date) %>% dyLegend(labelsSeparateLines = None)
dygraph(date) %>% dyLegend(labelsSeparateLines = True)
dygraph(date) %>% dyLegend(labelsSeparateLines = T)
gg<-dygraph(date) %>% dyLegend(labelsSeparateLines = T)
dyStackedLineGroup(gg)
dyStackedLineGroup(data=gg)
dyStackedLineGroup(name=gg)
dyStackedLineGroup(name=gg, gg)
dyRangeSelector(gg)
